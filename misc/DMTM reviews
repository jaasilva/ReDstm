- I miss some basic explanation about how a distributed transactional memory system works, how it differs from a distributed memory system (why are transactions useful here and how is TM implemented). The authors do not describe their memory model: Is there a shared address space?

- The differences between this work and those works that propose partial replication for key-value stores are not clearly explained.

- Why have people so far choosen to implement DTM only with full data replication? Is it easier?

- How do nodes that do not have all data access the data? When is memory moved? (if at all)

- Is the compiler alone able to produce the required annotations? If not, how much additional complexity does this proposal place on the programmer?

- One of the contributions of the authors is how to mark particular contra fully replicated data structure. They introduce a @Partitial to explicitly mark "class' fields, expressing that everything downstream of this field, in the heap objects' graph" should be replicated partially. Everything else should be fully replicated, as to lower the overhead of traversing common data structures. The authors mention the problem of cycles, that is pointers from partially replicated data structures that point to fully replicated data structures, and state that they are not allowed. While the problem is implicitly clear, the authors do not report how they enforce this, neither what the alternatives would be. E.g. marking classes as partially replicated instead seems to me a more natural approach, which is easier to understand. Why was this not chosen?

- The graph shows a much better performance for partially replicated transactions compared to full replication, however it's a little bit unclear to me why the transaction rate partially replication is constant over all replication factors. Is this because you are changing only partially replicated nodes? Is this realistic? And why if so do you still have a rage of transaction rates?

- Does one really get more fault tolerance by replicating everywhere? Doesn't this also come at the cost of more failing parts?

- Partial Replication in Distributed Memory environments: Has there been any research?

